# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  inputs,
  ...
}:

let
  unstable-pkgs = import inputs.nixpkgs-unstable {
    system = pkgs.system;
    config.allowUnfree = true;
  };
in

{
  imports = [
    (modulesPath + "/profiles/qemu-guest.nix")
  ];

  boot.initrd.availableKernelModules = [
    "ehci_pci"
    "xhci_pci"
    "usbhid"
    "sr_mod"
    "virtio_balloon"
    "virtio_mmio"
    "virtio_net"
    "prl_tg"
  ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "prl_fs" ];
  boot.extraModulePackages = [ ];
  boot.kernelParams = [
    "console=tty4"
    "xhci_hcd.quirks=0x40"
    "quiet"
    "splash"
    "boot.shell_on_fail"
    "udev.log_priority=3"
    "rd.systemd.show_status=auto"
    "devices.pci_balloon=0"
  ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/769a806c-5334-4a42-bc9f-5a1868e4dbd2";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/E182-4A67";
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/6e080e04-7682-499c-8a8f-de4ae335c30a"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s5.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "aarch64-linux";
  hardware.parallels = {
    enable = true;
    package = unstable-pkgs.linuxPackages_latest.prl-tools;
  };

  nixpkgs.config.allowUnfreePredicate = pkg: builtins.elem (lib.getName pkg) [ "prl-tools" ];
}
